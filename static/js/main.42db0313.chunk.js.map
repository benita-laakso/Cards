{"version":3,"sources":["Persons/Persons.js","App.js","serviceWorker.js","index.js"],"names":["Persons","props","react_default","a","createElement","className","onClick","click","name","title","age","type","onChange","changed","value","App","state","persons","id","showPersons","changeNameHandler","newName","_this","setState","inputNameHandler","event","target","togglePersonsHandler","checkToggle","removeItemHandler","personIndex","Object","toConsumableArray","splice","findIndex","p","person","objectSpread","_this2","this","personsIf","map","index","src_Persons_Persons","key","style","backgroundColor","padding","cursor","color","border","borderRadius","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gSAceA,eAXC,SAACC,GACf,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACnBH,EAAAC,EAAAC,cAAA,KAAGE,QAAWL,EAAMM,OAApB,QAAkCN,EAAMO,MACxCN,EAAAC,EAAAC,cAAA,kBAAUH,EAAMQ,OAChBP,EAAAC,EAAAC,cAAA,gBAAQH,EAAMS,KACdR,EAAAC,EAAAC,cAAA,SAAOO,KAAK,OAAOC,SAAUX,EAAMY,QAASC,MAAQb,EAAMO,UC6G3CO,6MAjHfC,MAAM,CACJC,QAAQ,CACN,CAACC,GAAG,IAAKV,KAAK,OAAQC,MAAM,WAAYC,IAAI,IAC5C,CAACQ,GAAG,IAAKV,KAAK,OAAQC,MAAM,MAAMC,IAAI,IACtC,CAACQ,GAAG,IAAKV,KAAK,OAAQC,MAAM,MAAMC,IAAI,IACtC,CAACQ,GAAG,IAAKV,KAAK,OAAQC,MAAM,MAAMC,IAAI,IACtC,CAACQ,GAAG,IAAKV,KAAK,OAAQC,MAAM,YAAYC,IAAI,KAE9CS,aAAY,KAGdC,kBAAmB,SAACC,GAClBC,EAAKC,SAAS,CACZN,QAAQ,CACN,CAACT,KAAKa,EAASZ,MAAM,WAAYC,IAAI,IACrC,CAACF,KAAK,YAAaC,MAAM,MAAMC,IAAI,IACnC,CAACF,KAAK,SAAUC,MAAM,YAAYC,IAAI,UAM5Cc,iBAAmB,SAAAC,GACjBH,EAAKC,SAAS,CACdN,QAAQ,CACN,CAACT,KAAK,OAAQC,MAAM,WAAYC,IAAI,IACpC,CAACF,KAAMiB,EAAMC,OAAOZ,MAAOL,MAAM,MAAMC,IAAI,IAC3C,CAACF,KAAK,OAAQC,MAAM,YAAYC,IAAI,UAIxCiB,qBAAuB,WACrB,IAAMC,EAAcN,EAAKN,MAAMG,YAC/BG,EAAKC,SAAS,CACZJ,aAAaS,OAIfC,kBAAoB,SAACC,GACvB,IAAMb,EAAOc,OAAAC,EAAA,EAAAD,CAAOT,EAAKN,MAAMC,SAC/BA,EAAQgB,OAAOH,EAAa,GAC5BR,EAAKC,SAAS,CAACN,QAAQA,OAGvBO,iBAAkB,SAACC,EAAOP,GAC1B,IAAMY,EAAcR,EAAKN,MAAMC,QAAQiB,UACrC,SAAAC,GACE,OAAOA,EAAEjB,KAAOA,IAGdkB,EAAML,OAAAM,EAAA,EAAAN,CAAA,GACPT,EAAKN,MAAMC,QAAQa,IAIxBM,EAAO5B,KAAOiB,EAAMC,OAAOZ,MAG3B,IAAMG,EAAOc,OAAAC,EAAA,EAAAD,CAAOT,EAAKN,MAAMC,SAC/BA,EAAQa,GAAeM,EAGvBd,EAAKC,SAAS,CACZN,QAAQA,6EAIA,IAAAqB,EAAAC,KAUDC,EAAY,KAqBjB,OApBKD,KAAKvB,MAAMG,cACbqB,EACAtC,EAAAC,EAAAC,cAAA,WAEEmC,KAAKvB,MAAMC,QAAQwB,IAAI,SAACN,EAAEO,GACxB,OAAOxC,EAAAC,EAAAC,cAACuC,EAAD,CACPpC,MAAO,kBAAI+B,EAAKT,kBAAkBa,IAClClC,KAAM2B,EAAE3B,KACRC,MAAQ0B,EAAE1B,MACVC,IAAKyB,EAAEzB,IACPkC,IAAKT,EAAEjB,GACPL,QAAS,SAACY,GAAD,OAAWa,EAAKd,iBAAiBC,EAAOU,EAAEjB,WAU9DhB,EAAAC,EAAAC,cAAA,WAEIF,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,4BACAF,EAAAC,EAAAC,cAAA,UAAQyC,MAnCQ,CAClBC,gBAAgB,OAChBC,QAAQ,OACRC,OAAO,UACPC,MAAM,QACNC,OAAO,OACPC,aAAc,OA6BgB7C,QAASiC,KAAKZ,sBAA1C,UACCa,WAzGSY,aCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOzD,EAAAC,EAAAC,cAACwD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.42db0313.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Persons.css';\r\n\r\nconst Persons = (props)=>{\r\n  return(\r\n    <div className=\"Persons\">\r\n<p onClick = {props.click} >Name:{props.name}</p>\r\n<p>Title:{props.title}</p>\r\n<p>Age:{props.age}</p>\r\n<input type=\"text\" onChange={props.changed} value ={props.name} /> \r\n    </div>\r\n  )\r\n};\r\n\r\nexport default Persons;\r\n","import React ,{Component}from 'react';\nimport './App.css';\nimport Persons from './Persons/Persons';\n\nclass App extends Component{\nstate={\n  persons:[\n    {id:'1', name:'Kati', title:'Designer', age:28},\n    {id:'2', name:'Mari', title:'CEO',age:25},\n    {id:'3', name:'Mari', title:'CEO',age:25},\n    {id:'4', name:'Mari', title:'CEO',age:25},\n    {id:'5', name:'Anne', title:'Developer',age:29},\n  ],\n  showPersons:false\n};\n\nchangeNameHandler =(newName)=> {\n  this.setState({\n    persons:[\n      {name:newName, title:'Designer', age:28},\n      {name:'Ljudmilla', title:'CEO',age:25},\n      {name:'Katrin', title:'Developer',age:29},\n    ]\n\n  })\n}\n\ninputNameHandler = event =>{\n  this.setState({\n  persons:[\n    {name:'Kati', title:'Designer', age:28},\n    {name: event.target.value, title:'CEO',age:25},\n    {name:'Anne', title:'Developer',age:29},\n  ]\n  })\n}\ntogglePersonsHandler = () =>{\n  const checkToggle = this.state.showPersons;\n  this.setState({\n    showPersons:!checkToggle\n  });\n};\n\n  removeItemHandler = (personIndex) =>{\nconst persons = [...this.state.persons];\npersons.splice(personIndex, 1);\nthis.setState({persons:persons});\n}\n\ninputNameHandler =(event, id)=>{\nconst personIndex = this.state.persons.findIndex(\n  p =>{\n    return p.id === id;\n  }\n);// we try to figure out , is there ID in the array\nconst person = {\n  ...this.state.persons[personIndex]\n};//We take right object and with spread operators we create a new object (copy)\n//distribute all attributes from that object\n\nperson.name = event.target.value;\n//We take name and replace it with event.target.value\n\nconst persons = [...this.state.persons];\npersons[personIndex] = person;\n\n//and finaly we update state updated object, updated array\nthis.setState({\n  persons:persons\n})\n}\n\n  render(){\n    const  buttonStyle ={\n      backgroundColor:'blue',\n      padding:'10px',\n      cursor:'pointer',\n      color:'white',\n      border:'none',\n      borderRadius: '5px'\n     }\n\n     let personsIf = null;\n     if (this.state.showPersons){\n       personsIf =(\n       <div>\n       {\n         this.state.persons.map((p,index) =>{\n           return <Persons\n           click={()=>this.removeItemHandler(index)}\n           name={p.name}\n           title ={p.title}\n           age={p.age}\n           key={p.id}\n           changed={(event) => this.inputNameHandler(event, p.id)}\n           />;\n       }\n     )\n     }\n       </div>\n\n);\n}\n    return(\n<div>\n\n    <div>\n        <h1>Our Cards task</h1>\n        <button style={buttonStyle} onClick={this.togglePersonsHandler}>Toggle</button>\n        {personsIf}\n    </div>\n\n</div>\n    )\n  }\n};\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}